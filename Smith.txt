#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>

using namespace std;

#define UPBOUND 31623	

vector <int> prime;


bool is_prime(int n)
{
	if (n == 2)
		return true;

	if (n% 2 == 0)
		return false;
	
	for (int c = 3; c <= ceil(sqrt(n)); c += 2)
		if (n% c == 0)
			return false;
			
	return true;
}


void find_prime()
{
	prime.push_back(2);
	for (int c = 3; c <UPBOUND; c += 2)
		if (is_prime(c))
			prime.push_back(c);
}

int digits_sum(int number)
{
	int sum = 0;
	while (number)
	{
		sum += (number% 10);
		number/= 10;
	}
	
	return sum;
}

void smith(int number)
{
	int current = number + 1;
	while (1)
	{
		
		if (is_prime(current))
		{
			current++;
			continue;
		}
		
		
		int tmp = current;
		int sum = digits_sum(current), tsum = 0;
		
		while (1)
		{
			int memo = tmp;
			for (int c = 0; c <prime.size(); c++)
				if (tmp% prime[c] == 0)
				{
					tmp/= prime[c];
					tsum += digits_sum(prime[c]);
					break;
				}
			
			
			if (tmp == 1 || memo == tmp)
				break;
		}
		
		
		if (tmp> 1)
			tsum += digits_sum(tmp);
		
		if (tsum == sum)
		{
			cout << current << endl;
			break;
		}
		
		current++;
	}
}

int main(int ac, char *av[])
{
	int cases, number;
	
	find_prime();
	
	cin >> cases;
	while (cases--)
	{
		cin >> number;
		smith(number);
	}

	return 0;
}
